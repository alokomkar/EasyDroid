<text>
A great feature about using fragments in your activity is the ability to add, remove, replace, and perform other actions with them, in response to user interaction. Each set of changes that you commit to the activity is called a transaction and you can perform one using APIs in FragmentTransaction. You can also save each transaction to a back stack managed by the activity, allowing the user to navigate backward through the fragment changes (similar to navigating backward through activities).
</text>
<code>java_fragment_transaction</code>
<code>java_add_to_back_stack</code>
<code>java_back_stack</java>
<text>
If you add multiple changes to the transaction (such as another <i>add()</i> or <i>remove()</i>) and call <i>addToBackStack()</i>, then all changes applied before you call <i>commit()</i> are added to the back stack as a single transaction and the Back button will reverse them all together.

The order in which you add changes to a FragmentTransaction doesn't matter, except:

You must call commit() last
If you're adding multiple fragments to the same container, then the order in which you add them determines the order they appear in the view hierarchy
If you do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed when the transaction is committed and the user cannot navigate back to it. Whereas, if you do call addToBackStack() when removing a fragment, then the fragment is stopped and will be resumed if the user navigates back.

<i>Tip: For each fragment transaction, you can apply a transition animation, by calling setTransition() before you commit.</i>
</text>
<text>
Calling <i>commit()</i> does not perform the transaction immediately. Rather, it schedules it to run on the activity's UI thread (the "main" thread) as soon as the thread is able to do so. If necessary, however, you may call <i>executePendingTransactions()</i> from your UI thread to immediately execute transactions submitted by <i>commit().</i> Doing so is usually not necessary unless the transaction is a dependency for jobs in other threads.

<i>Caution: You can commit a transaction using commit() only prior to the activity saving its state (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. For situations in which its okay that you lose the commit, use commitAllowingStateLoss().</i>


</text>